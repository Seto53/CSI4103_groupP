//95% code is mine, CSS to center the elements was generated by ChatGPT
import React, {useEffect, useState} from 'react';
import '../App.css';
import Map from './Map';
//Data provided by OCTranspo
import stopsJson from '../data/stops.json';
import {HelpOutline} from '@mui/icons-material';
import {IconButton} from '@mui/material';
import HelpDialog from './HelpDialog';
import ErrorAlert from './Alerts/ErrorAlert';
import LoadingAlert from './Alerts/LoadingAlert';
import TrackingAlert from './Alerts/TrackingAlert';
import {db} from "../firebase";
import "firebase/firestore"


function Bus({currentLocation, zoom, setCurrentLocation, setZoom}) {
    const [stops, setStops] = useState([]);
    const [routes, setRoutes] = useState(null);
    const [hotels, setHotels] = useState([]);

    const [selectedStop, setSelectedStop] = useState(null);
    const [selectedRoute, setSelectedRoute] = useState(null);

    const [busMarker, setBusMarker] = useState(null);

    const [errorAlert, setErrorAlert] = useState({
        open: false, message: '',
    });

    const [helpOpen, setHelpOpen] = useState(true);

    // Fetch stops from JSON file
    useEffect(() => {
        setStops(stopsJson);
    }, [stops]);

    useEffect(() => {
        try {
            const hotelsData = []
            db.collection("hotels").get()
                .then(function (querySnapshot) {
                    querySnapshot.forEach(function (doc) {
                        hotelsData.push(doc.data())
                    });
                    setHotels(hotelsData)
                })
                .catch(function (error) {
                    console.log("Error getting documents: ", error);
                });
        } catch {
            console.log("Error getting documents: ");
        }
    }, [])

    // This gets called when the user selects a route from the list
    // It fetches the bus location every 2 seconds if the route is valid
    useEffect(() => {
        const interval = setInterval(() => {
            // If the route is selected and there is no error
            if (selectedRoute && !errorAlert.open) {
                fetch('http://localhost:5000/route/' + selectedStop.stop_code + '/' + selectedRoute.RouteNo).then(res => {
                    if (res.status === 200) {
                        return res.json();
                    } else {
                        throw new Error(String(res.body));
                    }
                }).then(route => {
                    route = route.GetNextTripsForStopResult.Route.RouteDirection;
                    // If there are multiple routes choose the latest one
                    if (Array.isArray(route)) {
                        for (let i = 0; i < route.length; i++) {
                            if (route[i].RouteLabel === selectedRoute.RouteLabel) {
                                route = route[i];
                                break;
                            }
                        }
                    }
                    // If there are no trips
                    if (!route.Trips.Trip) {
                        displayError('No bus found');
                        return;
                    }
                    const trip = route.Trips.Trip[0];
                    // If there is no trip data
                    if (!trip) {
                        displayError('No bus found');
                        return;
                    }
                    // If there is no tracking data
                    if (trip.Longitude === '' || trip.Latitude === '') {
                        displayError('No tracking data found');
                        return;
                    }
                    setBusMarker({
                        route_code: selectedStop.stop_code,
                        route_name: selectedStop.stop_name,
                        route_lat: trip.Latitude,
                        route_lon: trip.Longitude,
                        route_eta: trip.AdjustedScheduleTime,
                    });
                }).catch(err => {
                    displayError(err);
                });
            }
        }, 2000);
        return () => clearInterval(interval);
    }, [selectedStop, selectedRoute, busMarker, errorAlert]);

    // This gets called when the user selects a stop from the list
    async function selectStop(stop) {
        // Removes the bus marker
        setSelectedStop(null);
        setSelectedRoute(null);
        setBusMarker(null);
        setRoutes(null);
        closeErrorAlert();
        if (!stop) return;
        if (!stop.stop_code) return;
        setSelectedStop(() => {
            return ({
                stop_code: stop.stop_code,
                stop_name: stop.stop_name,
                stop_lat: stop.stop_lat,
                stop_lon: stop.stop_lon,
            });
        });
        try {
            fetch('http://localhost:5000/route/' + stop.stop_code)
                .then(res => {
                    if (res.status === 200) {
                        return res.json();
                    } else {
                        throw new Error(String(res.body));
                    }
                })
                .then(routes => {
                    routes = routes.GetNextTripsForStopResult.Route.RouteDirection;
                    const routeList = [];
                    if (!Array.isArray(routes)) {
                        routes = [routes];
                    }
                    for (let route of routes) {
                        if (Array.isArray(route)) {
                            for (let i = 0; i < route.length; i++) {
                                if (route[i].RouteLabel === selectedRoute.RouteLabel) {
                                    route = route[i];
                                    break;
                                }
                            }
                        }
                        if (!route.Trips) {
                            continue;
                        }
                        // If there are no trips
                        if (!route.Trips.Trip) {
                            route.disabled = true;
                            routeList.push(route);
                            continue;
                        }
                        const trip = route.Trips.Trip[0];
                        // If there is no trip data
                        if (!trip) {
                            route.disabled = true;
                            routeList.push(route);
                            continue;
                        }
                        if (trip.Longitude === '' || trip.Latitude === '') {
                            route.disabled = true;
                            routeList.push(route);
                            continue;
                        }
                        routeList.push(route);
                    }
                    setRoutes(routeList);
                }).catch(err => {
                displayError(err);
            });
        } catch (err) {
            displayError(err);
        }
    }

    // This gets called when the user selects a route from the list
    function selectRoute(route) {
        // Removes the bus marker
        setSelectedRoute(null);
        setBusMarker(null);
        closeErrorAlert();
        if (!route) return;
        if (!route.RouteNo) return;
        setSelectedRoute(route);
    }

    function displayError(error) {
        setSelectedRoute(null);
        setBusMarker(null);
        setRoutes(null);
        console.log(error);
        if (typeof error === 'string') {
            setErrorAlert({
                open: true, message: error
            });
            return;
        }
        setErrorAlert({
            open: true, message: 'An error occurred while fetching bus data'
        });
    }

    // Close error alert
    function closeErrorAlert() {
        setErrorAlert({
            open: false, message: '',
        });
    }

    function handleHelpClick() {
        setHelpOpen(true);
    }

    return (
        <div>
            <ErrorAlert open={errorAlert.open} closeErrorAlert={closeErrorAlert} message={errorAlert.message}/>
            <LoadingAlert open={!errorAlert.open && selectedRoute && selectedStop && busMarker == null}
                          selectRoute={selectRoute} selectedStop={selectedStop} selectedRoute={selectedRoute}/>
            <TrackingAlert open={!errorAlert.open && selectedRoute && selectedStop && busMarker != null}
                           selectRoute={selectRoute} selectedRoute={selectedRoute} selectedStop={selectedStop}
                           busMarker={busMarker}/>
            <Map selectedStop={selectedStop} busMarker={busMarker} stops={stops} routes={routes}
                 selectStop={selectStop} selectRoute={selectRoute} currentLocation={currentLocation}
                 setCurrentLocation={setCurrentLocation} zoom={zoom} setZoom={setZoom} hotels={hotels}
            />
            <IconButton
                className="help-icon-container"
                aria-label="Help"
                sx={{
                    color: '#4285f4',
                    position: 'absolute',
                }}
                onClick={() => {
                    handleHelpClick();
                }}>
                <HelpOutline/>
            </IconButton>
            <HelpDialog helpOpen={helpOpen} setHelpOpen={setHelpOpen}/>
        </div>
    );
}

export default Bus;
